package {	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.ui.Keyboard;	import flash.events.MouseEvent;	import com.coreyoneil.collision.CollisionList;	import flash.text.TextField;	import flash.net.SharedObject;	import flashx.textLayout.accessibility.TextAccImpl;	import flash.text.TextFormat;		import flash.display.BlendMode;	import flash.net.FileReference;	import flash.net.FileFilter;	import flash.utils.ByteArray;	import flash.errors.EOFError;	public class SurvivalGame extends MovieClip	{		public var hero				:Hero;		public var downKeyPressed	:Boolean = false;		public var upKeyPressed		:Boolean = false;		public var leftKeyPressed	:Boolean = false;		public var rightKeyPressed	:Boolean = false;		public var rKeyPressed		:Boolean = false;		public var replaying		:Boolean = false;		public var sKeyPressed 		:Boolean = false;		public var pp				:Boolean = false;		public var timer			:Timer;		public var army				:Array;		public var acc				:Number = 1.01;		public var collisionList	:CollisionList;		public var collisions		:Array;		public var diff				:int = 10;		public var rand				:int;				public var score			:Score;		public var hScore			:HScore;		public var highscore		:SharedObject;		public var replay			:Array;		public var tempReplay		:Array;		public var tempScore		:int;		public var replayLoad		:FileReference;		public var ba				:ByteArray;		public function SurvivalGame()		{			ba = new ByteArray;			replayLoad = new FileReference;			replayLoad.addEventListener(Event.COMPLETE, done);			replayLoad.addEventListener(Event.CANCEL, cancel);			highscore = SharedObject.getLocal("highscores");			if(highscore.data.score == null)			{				highscore.data.score = 0;				highscore.data.replay = null;			}			//highscore.data.score = 0;			//highscore.data.replay = null;			score = new Score();			hScore = new HScore();			addChild(hScore);			addChild(score);			replay = new Array();			timer = new Timer(25);			timer.start();			timer.addEventListener(TimerEvent.TIMER, onTick);			addEventListener(Event.ADDED_TO_STAGE, onAdd);						//add hero			hero = new Hero();			addChild(hero);			army = new Array();			collisionList = new CollisionList(hero);		}		private function onTick(e:TimerEvent)		{			if(replaying == false)			{				rand = Math.random() * 100;			}			else			{				rand = 101;			}			var repObject = new Object(); 			repObject.xVal = hero.x;			repObject.yVal = hero.y;			score.text = (timer.currentCount).toString();			hScore.text = highscore.data.score;			if(timer.currentCount % 100 == 0)			{				diff++;			}			collisions = collisionList.checkCollisions();			if (rand < diff)			{				var newZombie = new Zombie();				army.push(newZombie);				addChild(newZombie);				collisionList.addItem(newZombie);				repObject.zXVal = newZombie.posX;				repObject.zYVal = newZombie.posY;			}			replay.push(repObject);			//remove zombies when amount on the screen is greated than the difficulty + 5			if(army.length == 10 + diff)			{				removeChild(army[0]);				collisionList.removeItem(army[0]);				army[0] = null;				army.splice(0,1);			}			for each (var zombie:Zombie in army)			{				zombie.chase(hero.x, hero.y);			}			if (collisions.length > 0)			{				onHit();			}			if (downKeyPressed)			{				hero.moveABit(0,acc);			}			else			{				hero.still();			}			if (upKeyPressed)			{				hero.moveABit(0,-acc);			}			else			{				hero.still();			}			if (rightKeyPressed)			{				hero.moveABit(acc,0);			}			else			{				hero.still();			}			if (leftKeyPressed)			{				hero.moveABit(-acc,0);			}			else			{				hero.still();			}			if((leftKeyPressed && upKeyPressed) || (leftKeyPressed && downKeyPressed) || (rightKeyPressed && upKeyPressed) || (rightKeyPressed && downKeyPressed))			{				acc = Math.sqrt(Math.pow(1.01,2)/2);			}			else			{				acc = 1.01;			}			if(rKeyPressed)			{				trace("replay");				if(highscore.data.score > 0)				{					trace(highscore.data.replay);					onHit();					tempReplay = highscore.data.replay;					tempScore = highscore.data.score;					replaying = true;					hero.physics.reset();				}							}			if(replaying == true)			{				replayPlay();			}		}				private function replayPlay()		{			hero.x = highscore.data.replay[timer.currentCount].xVal;			hero.y = highscore.data.replay[timer.currentCount].yVal;			if(highscore.data.replay[timer.currentCount].zXVal != undefined)			{				var zombie = new Zombie();				zombie.x = highscore.data.replay[timer.currentCount].zXVal;				zombie.y = highscore.data.replay[timer.currentCount].zYVal;				addChild(zombie);				collisionList.addItem(zombie);				army.push(zombie);			}		}		private function open(e:Event)		{			timer.stop();		}		private function onHit()		{						timer.stop();			diff = 10;			if(replaying == false)			{				if(timer.currentCount > highscore.data.score)				{					highscore.data.score = timer.currentCount;					highscore.data.replay = replay;						highscore.flush();				}			}			else			{				trace(tempReplay == highscore.data.replay);				replaying = false;				highscore.data.replay = tempReplay;				highscore.data.score = tempScore;			}			for each (var zombie:Zombie in army)			{				removeChild(zombie);				zombie = null;			}			for(var i = army.length; i >= 0; i--)			{				army.splice(i,1);			}			for(var i = collisions.length; i >= 0; i--)			{				collisions.splice(i,1);			}			replay = new Array();			collisionList = new CollisionList(hero);			collisions = collisionList.checkCollisions();			hero.x = 250;			hero.y = 250;			army = new Array();			timer.reset();			timer.start();		}		private function onAdd(e:Event)		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPressed);			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyRelease);		}		private function onKeyPressed(e:KeyboardEvent)		{			switch (e.keyCode)			{				case Keyboard.UP :					upKeyPressed = true;					break;				case Keyboard.DOWN :					downKeyPressed = true;					break;				case Keyboard.LEFT :					leftKeyPressed = true;					break;				case Keyboard.RIGHT :					rightKeyPressed = true;					break;				case 82:					rKeyPressed = true;					trace("r hit");					break;				case 16:					if(pp == false)					{						timer.stop();						pp = true;					}					else					{						timer.start();						pp = false;					}					break;				case 83:					if(replaying == false)					{						var save = new FileReference;						timer.stop();						save.addEventListener(Event.CANCEL, cancel);						save.addEventListener(Event.COMPLETE, sDone);												ba.writeObject(highscore.data.replay); //Saves replay						ba.writeDouble(highscore.data.score); //saves score						ba.compress();												save.save(ba, "Replay - "+highscore.data.score.toString()+".hsr");					} 					break;				case 76:					if(replaying == false)					{						replayLoad.browse();						replayLoad.addEventListener(Event.SELECT, fileSelect);						timer.stop();					}			}		}		private function sDone(e:Event)		{			timer.start();		}		private function fileSelect(e:Event)		{			replayLoad.load();		}		private function done(e:Event)		{						tempReplay = highscore.data.replay; //Sets the temp to the replay			tempScore = highscore.data.score;						onHit();			ba = e.target.data;			ba.position = 0;			ba.uncompress();			ba.position = 0;			highscore.data.replay = ba.readObject(); //Sets the replay to the loaded replay			highscore.data.score = ba.readDouble();			replaying = true;			timer.start();		}		private function cancel(e:Event)		{			timer.start();		}		private function onKeyRelease(e:KeyboardEvent)		{			switch (e.keyCode)			{				case Keyboard.UP :					upKeyPressed = false;					break;				case 16:					upKeyPressed = false;					break;				case Keyboard.DOWN :					downKeyPressed = false;					break;				case Keyboard.LEFT :					leftKeyPressed = false;					break;				case Keyboard.RIGHT :					rightKeyPressed = false;					break;				case 82:					rKeyPressed = false;					break;			}		}	}}